get_current_branch() {
    git rev-parse --abbrev-ref HEAD
}

commit_changes() {
    local this_branch=$(get_current_branch)
    
    if [ "$1" = "one" ]; then
        shift
        git commit -m "$this_branch" "$@"
    elif [ "$1" = "test" ]; then
        shift
        git commit -m "testing $this_branch" "$@"
    else
        git commit "$@"
    fi
}

pop_commit() {
  local reset_mode="--soft"
  local commit_count=1

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -m)
        shift
        reset_mode="$1"
        ;;
      -n)
        shift
        commit_count="$1"
        ;;
      *)
        echo "Invalid argument: $1"
        return 1
        ;;
    esac
    shift
  done

  git reset "$reset_mode" "HEAD~$commit_count"
}

handle_commit() {
  case "$1" in
    pop)
      pop_commit "${@:2}"
      ;;
    *)

      # If no arguments, Call commit_changes with all arguments
      commit_changes "$@"
      ;;
  esac
}

push_changes() {
    local this_branch=$(get_current_branch)
    local force_push=""

    if [ "$1" = "-f" ]; then
        force_push="-f"
    fi

    git push origin $force_push "$this_branch" --no-verify
}

pull_changes() {
    local this_branch=$(get_current_branch)
    git pull origin "$this_branch"
}

print_this_branch() {
    local this_branch=$(get_current_branch)
    echo "Current branch: $this_branch"
}

branch_exists() {
    local branch_name="$1"
    if git show-ref --verify --quiet "refs/heads/$branch_name"; then
        return 0 # Branch exists
    else
        return 1 # Branch does not exist
    fi
}

handle_this_command() {
    case "$1" in
        b)
            print_this_branch
            ;;
        *)
            echo "Unknown command. Usage: mygit this [b]"
            ;;
    esac
}

handle_is_command() {
    case "$1" in
        b)
            shift
            branch_name="$1"
            if branch_exists "$branch_name"; then
                echo "true"
                return 0
            else
                echo "false"
                return 1
            fi
            ;;
        *)
            echo "Unknown command. Usage: mygit is b <branch_name>"
            ;;
    esac
}

add_or_delete_worktree() {
    if [ "$1" = "-a" ]; then
        shift
        branch_name="$1"
        shift
        worktree_path="$1"
        if branch_exists "$branch_name"; then
            git worktree add "$worktree_path" "$branch_name"
        else
            echo "Branch does not exist. Creating new branch '$branch_name'..."
            git worktree add "$worktree_path" -b "$branch_name"
        fi
    fi

    if [ "$1" = "-d" ]; then
        shift
        worktree_path="$1"
        if [ -d "$worktree_path" ]; then
            git worktree remove "$worktree_path"
        else
            echo "Worktree directory does not exist."
        fi
    fi

    if [ "$1" = "-df" ]; then
        shift
        worktree_path="$1"
        if [ -d "$worktree_path" ]; then
            git worktree remove -f "$worktree_path"
        else
            echo "Worktree directory does not exist."
        fi
    fi
}

pch() {
    local pch_state="$1"

    case "$pch_state" in
        on)
            git config --unset core.hooksPath
            ;;
        off)
            git config core.hooksPath /dev/null
            ;;
        *)
            echo "Unknown command. Usage: pch [on|off]"
            ;;
    esac
}

handle_stash() {
    local stash_action = "$1"
    local patch_name="$2"
    local patch_path="$3"

    if [ -z "$patch_path" ]; then
        patch_path="."
    fi
    local patch_file_path="$patch_path/$patch_name.patch"

    case "$stash_action" in
        save)
            git stash show -p > "$patch_file_path"
            ;;
        apply)
            git apply "$patch_file_path"
            ;;
        *)
            echo "Unknown command. Usage: stash [save|apply|pop] <patch_name> [patch_path]"
            ;;
    esac
}

handle_clone() {
    # Check if the repository argument is provided
    if [ -z "$1" ]; then
        echo "Error: No repository specified. Usage: handle_clone <org/repo>"
        return 1
    fi

    local hostname="mygit"
    local repo="$1"

    git clone "git@$hostname:$repo.git"
}

handle_set_repo_user() {
    git config user.name "amateur-veteran"
    git config user.email "soggymaggi@gmail.com"
    echo "User set to amateur-veteran"
}

handle_set_repo_origin() {
    # Extract the current repository's remote URL
    local current_remote_url=$(git config --get remote.origin.url)

    # Extract the username or organization and repository name from the URL
    local repo_info=$(echo "$current_remote_url" | sed -E 's|.*[:/]([^/]+/[^/]+)\.git$|\1|')

    # Construct the new remote URL
    local new_remote_url="git@mygit:$repo_info"

    # Set the new remote URL as the origin
    git remote set-url origin "$new_remote_url"

    echo "Remote origin set to $new_remote_url"
}


mygit() {
    case "$1" in
        commit)
            handle_commit "${@:2}"
            ;;
        push)
            push_changes "${@:2}"
            ;;
        pull)
            pull_changes
            ;;
        status)
            git "$@"
            ;;
        this)
            shift
            handle_this_command "$@"
            ;;
        is)
            shift
            handle_is_command "$@"
            ;;
        wt)
            shift
            add_or_delete_worktree "$@"
            ;;
        pch)
            shift
            pch "$@"
            ;;
        stash)
            shift
            handle_stash "$@"
            ;;
        set-repo-user)
            shift
            handle_set_repo_user "$@"
            ;;
        set-repo-origin)
            shift
            handle_set_repo_origin "$@"
            ;;
        clone)
            shift
            handle_clone "$@"
            ;;
        *)
            echo "Unknown command. Usage: mygit [commit|push|pull|status|this|is|wt|clone|set-repo-user]"
            ;;
    esac
}